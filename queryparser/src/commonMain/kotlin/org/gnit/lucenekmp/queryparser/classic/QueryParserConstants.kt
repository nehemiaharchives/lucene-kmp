package org.gnit.lucenekmp.queryparser.classic


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
interface QueryParserConstants {
    companion object {
        /** End of File.  */
        const val EOF: Int = 0

        /** RegularExpression Id.  */
        const val _NUM_CHAR: Int = 1

        /** RegularExpression Id.  */
        const val _ESCAPED_CHAR: Int = 2

        /** RegularExpression Id.  */
        const val _TERM_START_CHAR: Int = 3

        /** RegularExpression Id.  */
        const val _TERM_CHAR: Int = 4

        /** RegularExpression Id.  */
        const val _WHITESPACE: Int = 5

        /** RegularExpression Id.  */
        const val _QUOTED_CHAR: Int = 6

        /** RegularExpression Id.  */
        const val AND: Int = 8

        /** RegularExpression Id.  */
        const val OR: Int = 9

        /** RegularExpression Id.  */
        const val NOT: Int = 10

        /** RegularExpression Id.  */
        const val PLUS: Int = 11

        /** RegularExpression Id.  */
        const val MINUS: Int = 12

        /** RegularExpression Id.  */
        const val BAREOPER: Int = 13

        /** RegularExpression Id.  */
        const val LPAREN: Int = 14

        /** RegularExpression Id.  */
        const val RPAREN: Int = 15

        /** RegularExpression Id.  */
        const val COLON: Int = 16

        /** RegularExpression Id.  */
        const val STAR: Int = 17

        /** RegularExpression Id.  */
        const val CARAT: Int = 18

        /** RegularExpression Id.  */
        const val QUOTED: Int = 19

        /** RegularExpression Id.  */
        const val TERM: Int = 20

        /** RegularExpression Id.  */
        const val FUZZY_SLOP: Int = 21

        /** RegularExpression Id.  */
        const val PREFIXTERM: Int = 22

        /** RegularExpression Id.  */
        const val WILDTERM: Int = 23

        /** RegularExpression Id.  */
        const val REGEXPTERM: Int = 24

        /** RegularExpression Id.  */
        const val RANGEIN_START: Int = 25

        /** RegularExpression Id.  */
        const val RANGEEX_START: Int = 26

        /** RegularExpression Id.  */
        const val NUMBER: Int = 27

        /** RegularExpression Id.  */
        const val RANGE_TO: Int = 28

        /** RegularExpression Id.  */
        const val RANGEIN_END: Int = 29

        /** RegularExpression Id.  */
        const val RANGEEX_END: Int = 30

        /** RegularExpression Id.  */
        const val RANGE_QUOTED: Int = 31

        /** RegularExpression Id.  */
        const val RANGE_GOOP: Int = 32

        /** Lexical state.  */
        const val Boost: Int = 0

        /** Lexical state.  */
        const val Range: Int = 1

        /** Lexical state.  */
        const val DEFAULT: Int = 2

        /** Literal token values.  */
        val tokenImage: Array<String> = arrayOf<String>(
            "<EOF>",
            "<_NUM_CHAR>",
            "<_ESCAPED_CHAR>",
            "<_TERM_START_CHAR>",
            "<_TERM_CHAR>",
            "<_WHITESPACE>",
            "<_QUOTED_CHAR>",
            "<token of kind 7>",
            "<AND>",
            "<OR>",
            "<NOT>",
            "\"+\"",
            "\"-\"",
            "<BAREOPER>",
            "\"(\"",
            "\")\"",
            "\":\"",
            "\"*\"",
            "\"^\"",
            "<QUOTED>",
            "<TERM>",
            "<FUZZY_SLOP>",
            "<PREFIXTERM>",
            "<WILDTERM>",
            "<REGEXPTERM>",
            "\"[\"",
            "\"{\"",
            "<NUMBER>",
            "\"TO\"",
            "\"]\"",
            "\"}\"",
            "<RANGE_QUOTED>",
            "<RANGE_GOOP>",
        )
    }
}
