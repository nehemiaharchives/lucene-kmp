package org.gnit.lucenekmp.geo

import org.gnit.lucenekmp.tests.geo.GeoTestUtil
import org.gnit.lucenekmp.tests.util.LuceneTestCase
import kotlin.math.abs
import kotlin.test.Test
import kotlin.test.Ignore
import kotlin.test.assertFalse
import kotlin.test.assertTrue
import kotlin.test.assertEquals

class TestTessellator : LuceneTestCase() {

    @Test
    fun testLinesIntersect() {
        val rect = GeoTestUtil.nextBoxNotCrossingDateline()
        assertTrue(
            Tessellator.linesIntersect(
                rect.minLon,
                rect.minLat,
                rect.maxLon,
                rect.maxLat,
                rect.maxLon,
                rect.minLat,
                rect.minLon,
                rect.maxLat
            )
        )
        assertFalse(
            Tessellator.linesIntersect(
                rect.minLon,
                rect.maxLat,
                rect.maxLon,
                rect.maxLat,
                rect.minLon - 1.0,
                rect.minLat,
                rect.minLon - 1.0,
                rect.maxLat
            )
        )
    }

    @Test
    fun testSimpleTessellation() {
        var poly = GeoTestUtil.createRegularPolygon(0.0, 0.0, 100000.0, 100000)
        val inner = Polygon(
            doubleArrayOf(-1.0, -1.0, 0.5, 1.0, 1.0, 0.5, -1.0),
            doubleArrayOf(1.0, -1.0, -0.5, -1.0, 1.0, 0.5, 1.0)
        )
        val inner2 = Polygon(
            doubleArrayOf(-1.0, -1.0, 0.5, 1.0, 1.0, 0.5, -1.0),
            doubleArrayOf(-2.0, -4.0, -3.5, -4.0, -2.0, -2.5, -2.0)
        )
        poly = Polygon(poly.getPolyLats(), poly.getPolyLons(), inner, inner2)
        assertTrue(Tessellator.tessellate(poly, random().nextBoolean()).size > 0)
    }

    @Test
    @LuceneTestCase.Companion.Nightly
    fun testSimpleTessellationAtNight() {
        var poly = GeoTestUtil.createRegularPolygon(0.0, 0.0, 1_000_000.0, 1_000_000)
        val inner = Polygon(
            doubleArrayOf(-1.0, -1.0, 0.5, 1.0, 1.0, 0.5, -1.0),
            doubleArrayOf(1.0, -1.0, -0.5, -1.0, 1.0, 0.5, 1.0)
        )
        val inner2 = Polygon(
            doubleArrayOf(-1.0, -1.0, 0.5, 1.0, 1.0, 0.5, -1.0),
            doubleArrayOf(-2.0, -4.0, -3.5, -4.0, -2.0, -2.5, -2.0)
        )
        poly = Polygon(poly.getPolyLats(), poly.getPolyLons(), inner, inner2)
        assertTrue(Tessellator.tessellate(poly, random().nextBoolean()).size > 0)
    }

    @Test
    fun testLUCENE8454() {
        val geoJson = (
            "{\"type\": \"Polygon\", \"coordinates\": [[[167.8752929333776, -30.078235509309092], " +
                "[167.729078, -30.078368], [167.7288750679411, -29.918443128222044], [167.728949, -30.078598], " +
                "[167.582239, -30.078557], [167.58234527408044, -29.9717026229659], [167.43547018634274, -30.030896196337487], " +
                "[167.43528, -30.078575], [167.288467, -30.078185], [167.28846777961195, -30.078041819512045], " +
                "[167.142089, -30.077483], [167.143635, -29.813199], [167.1450859974141, -29.567345798606294], " +
                "[167.144888, -29.567345], [167.14633281276596, -29.302953194679134], [167.146281, -29.302953], " +
                "[167.147725, -29.036352], [167.292924, -29.036892], [167.2918703799358, -29.301396273146477], " +
                "[167.29192460356776, -29.301396365495897], [167.292964, -29.036798], [167.4380298884901, -29.037250444489867], " +
                "[167.43803, -29.03719], [167.583317, -29.037381], [167.58331697583935, -29.03744011447325], " +
                "[167.7285250024388, -29.037514998454153], [167.728525, -29.03749], [167.873835, -29.037419], " +
                "[167.87383543708486, -29.037703808329873], [168.018612, -29.037121], [168.0186121103674, -29.03714161109612], " +
                "[168.163842, -29.03656], [168.1650939339767, -29.247683610268638], [168.164004, -29.036724], " +
                "[168.309341, -29.036127], [168.3110870459225, -29.30068025473746], [168.311176, -29.30068], " +
                "[168.312472, -29.567161], [168.31243194795024, -29.56716111631554], [168.31443, -29.812612], " +
                "[168.31388505737894, -29.812615143334597], [168.315886, -30.077081], [168.169234, -30.077883], " +
                "[168.16913368505345, -30.06147402418803], [168.169224, -30.077737], [168.022447, -30.078317], " +
                "[168.02181920125142, -29.924959173336568], [168.0221, -30.078254], [167.875293, -30.078413], " +
                "[167.8752929333776, -30.078235509309092]]," +
                "[[167.43638852926597, -29.811913377451322], [167.43642819713568, -29.81191343893342], " +
                "[167.43660948310222, -29.684470839430233], [167.43638852926597, -29.811913377451322]], " +
                "[[167.2900169281376, -29.811700260790584], [167.29007609051774, -29.811700416752192], " +
                "[167.29022481985885, -29.765019899914726], [167.2900169281376, -29.811700260790584]], " +
                "[[167.72865676499967, -29.812149953736277], [167.7287401903084, -29.81214997654223], [167.72874, -29.812], " +
                "[167.72893197342373, -29.81199982820994], [167.72851531939722, -29.568503012044204], " +
                "[167.72851327553326, -29.56850301862287], [167.72865676499967, -29.812149953736277]], " +
                "[[167.87424106545097, -29.302014822030415], [167.87432742269175, -29.30201461402921], " +
                "[167.87418553426855, -29.265830214765142], [167.87424106545097, -29.302014822030415]], " +
                "[[168.1652103335658, -29.3030088541673], [168.16605788758287, -29.446580625201833], " +
                "[168.16556735186845, -29.303245228857072], [168.165381, -29.303246], [168.16537977124085, -29.303008170411644], " +
                "[168.1652103335658, -29.3030088541673]], " +
                "[[168.02088551865063, -29.647294313012004], [168.02133932508806, -29.811843292379823], " +
                "[168.02135614030843, -29.811843274349446], [168.021356, -29.811809], [168.02162340579383, -29.811807949652078], " +
                "[168.02088551865063, -29.647294313012004]]] }"
        )

        val polygons = Polygon.fromGeoJSON(geoJson)!!
        val result = Tessellator.tessellate(polygons[0], random().nextBoolean())
        kotlin.test.assertEquals(84, result.size)
    }

    @Test
    fun testLUCENE8534() {
        val geoJson = (
            "{\"type\":\"Polygon\",\"coordinates\":[[[168.412605,-32.061828],[168.41260500337557,-32.06164814731918],[168.263154,-32.061754],[168.263074,-31.795333]," +
                "[168.2631866330167,-31.79533292075007],[168.26293615809584,-31.55183198959802],[168.26271862830876,-31.55183199836296]," +
                "[168.26260885857246,-31.79551898342183],[168.262799,-31.795519],[168.262922,-32.061969],[168.113391,-32.061955]," +
                "[168.1136947020627,-31.797506925167987],[168.1134623401242,-31.7975067304478],[168.112867,-32.061933],[167.96342,-32.061572]," +
                "[167.964447,-31.795078],[167.96462554945853,-31.79507843013861],[167.96521264500555,-31.551376165945904],[167.965145,-31.551376]," +
                "[167.9663078329189,-31.287013079577566],[167.966251,-31.287013],[167.9664724470441,-31.186852765132446],[167.966135,-31.286996]," +
                "[167.96583002270634,-31.28699509215832],[167.96514242732414,-31.530648904745615],[167.96518,-31.530649],[167.964244373485,-31.795342905910022]," +
                "[167.964267,-31.795343],[167.963051,-32.06191],[167.813527,-32.061286],[167.81515841152935,-31.796764131690956],[167.815107,-31.796764]," +
                "[167.8163675951437,-31.55101526478777],[167.81635023954297,-31.551015225373174],[167.814827,-31.796834],[167.81479823247224,-31.796833898826222]," +
                "[167.813495,-32.061159],[167.664068,-32.060513],[167.66581,-31.794011],[167.6658519100183,-31.794011179736117],[167.6677495759609,-31.550438401064135]," +
                "[167.667432,-31.550437],[167.66930180157829,-31.286073839134556],[167.669105,-31.286073],[167.670807,-31.019532],[167.818843,-31.020159]," +
                "[167.8175723936035,-31.284543327213736],[167.81766095836642,-31.284543526532044],[167.818971,-31.020062],[167.967033,-31.020499]," +
                "[167.96703262843647,-31.020609267886275],[168.114968,-31.020815],[168.1149445990616,-31.05814524188174],[168.114978,-31.020912],[168.26306,-31.021035]," +
                "[168.2631849793437,-31.203987591682104],[168.263163,-31.021002],[168.411259,-31.020914],[168.41125954741193,-31.02123593258559]," +
                "[168.5589863328454,-31.020786105561243],[168.558986,-31.020705],[168.707027,-31.020199],[168.70828992266655,-31.242361611483734]," +
                "[168.707298,-31.020426],[168.855538,-31.019789],[168.85713808565947,-31.284233200286536],[168.857209,-31.284233]," +
                "[168.8583969293829,-31.54547348363567],[168.86057,-31.796021],[168.86004803213373,-31.796023826818654],[168.862202,-32.060514]," +
                "[168.712722,-32.061376],[168.71099229524427,-31.796760977737968],[168.7108263042178,-31.79676167516991],[168.712468,-32.061301]," +
                "[168.56291,-32.061787],[168.561684,-31.795261],[168.56198761104602,-31.795260018704994],[168.560821,-31.530975]," +
                "[168.56092374559077,-31.530974570518158],[168.56001677082173,-31.287057906497665],[168.5597021283975,-31.287058866102726]," +
                "[168.5607530382453,-31.530880020491022],[168.560769,-31.53088],[168.56079128925168,-31.539754620482725],[168.560842,-31.55152]," +
                "[168.56082083893278,-31.551520031401303],[168.56143311036655,-31.7953001584517],[168.561622,-31.7953],[168.562045,-32.0617],[168.412605,-32.061828]]," +
                "[[168.41212499436773,-31.68171617103951],[168.41200593405762,-31.551740860609502],[168.411912,-31.551741],[168.41154546767467,-31.416898111348704]," +
                "[168.41158059852074,-31.53102923335134],[168.411729,-31.531029],[168.41212499436773,-31.68171617103951]]," +
                "[[168.7083938476212,-31.28652950649234],[168.70945084576658,-31.485690997091577],[168.70886199577689,-31.28667838236468],[168.708488,-31.28668]," +
                "[168.7084873259438,-31.28652918474386],[168.7083938476212,-31.28652950649234]]," +
                "[[168.71121460687698,-31.795031659971823],[168.71136127361123,-31.79503081865431],[168.71038567290682,-31.657182838382653],[168.71121460687698,-31.795031659971823]]," +
                "[[167.81624041598312,-31.53023516975434],[167.81634270442586,-31.530235525706665],[167.81676369867318,-31.434841665952604],[167.81624041598312,-31.53023516975434]]]}"
        )

        val polygons = Polygon.fromGeoJSON(geoJson)!!
        val result = Tessellator.tessellate(polygons[0], random().nextBoolean())
        kotlin.test.assertEquals(113, result.size)
    }

    @Test
    fun testInvalidPolygonIntersects() {
        val wkt = "POLYGON((0 0, 1 1, 0 1, 1 0, 0 0))"
        val polygon = SimpleWKTShapeParser.parse(wkt) as Polygon

        run {
            val ex = expectThrows(IllegalArgumentException::class) {
                Tessellator.tessellate(polygon, true)
            }
            kotlin.test.assertEquals(
                "Polygon self-intersection at lat=0.5 lon=0.5",
                ex!!.message
            )
        }
        run {
            val ex = expectThrows(IllegalArgumentException::class) {
                Tessellator.tessellate(polygon, false)
            }
            kotlin.test.assertEquals(
                "Unable to Tessellate shape. Possible malformed shape detected.",
                ex!!.message
            )
        }
    }

    @Test
    fun testInvalidPolygonOverlap() {
        val wkt = (
            "POLYGON((6.0373903 52.0927095, 6.0363363 52.0924929, 6.0364421 52.0925414, " +
                "6.0366551 52.0927136, 6.0367463 52.092781, 6.0370682 52.0929958, 6.0372052 52.093085, " +
                "6.0373191 52.0931397, 6.037441 52.0931853, 6.0387158 52.0935294, 6.0388509 52.093564, " +
                "6.0388904 52.093572, 6.03894 52.0935172, 6.0389929 52.093481, 6.0390607 52.0934904, " +
                "6.0395233 52.0936092, 6.0397184 52.0936688, 6.0398596 52.0937371, 6.0399905 52.0938164, " +
                "6.0401399 52.0939142, 6.0402279 52.0939553, 6.0403145 52.0939837, 6.0405561 52.0940279, " +
                "6.0437818 52.0947554, 6.043835 52.0947734, 6.0438704 52.0947948, 6.0438877 52.0948026, " +
                "6.0439294 52.0948214, 6.0440239 52.0948431, 6.0440735 52.0948507, 6.0441791 52.0948543, " +
                "6.045512 52.0947949, 6.0455192 52.0948216, 6.0456981 52.0947986, 6.0459013 52.0947863, " +
                "6.0460089 52.0947857, 6.0461408 52.0948108, 6.0462669 52.0948578, 6.0463578 52.0949239, " +
                "6.0463764 52.0949825, 6.0463582 52.0950124, 6.0463968 52.0950234, 6.0463915 52.0950928, " +
                "6.0473354 52.0963349, 6.0485817 52.0963608, 6.0490603 52.0962177, 6.0489671 52.0960387, " +
                "6.0462486 52.0946473, 6.0438777 52.094124, 6.0425991 52.0938519, 6.0415155 52.0936271, " +
                "6.0413498 52.093569, 6.040999 52.0934704, 6.0406499 52.0933945, 6.040265 52.0933135, " +
                "6.0401695 52.0926941, 6.0401431 52.092505, 6.0393746 52.0924531, 6.0392555 52.0924338, " +
                "6.039146 52.0923841, 6.0390625 52.0923275, 6.0389748 52.0922443, 6.0378985 52.0913116, " +
                "6.0376887 52.0914018, 6.0375636 52.0914061, 6.037535 52.0914026, 6.037483 52.0913363, " +
                "6.0374139 52.0912876, 6.037277 52.0912639, 6.0370897 52.091257, 6.0370336 52.0913821, " +
                "6.0368773 52.0915326, 6.0366141 52.0917119, 6.0361993 52.091979, 6.0360755 52.0920244, " +
                "6.0360358 52.0920367, 6.0359538 52.0920908, 6.035886 52.0921313, 6.0358394 52.0921889, " +
                "6.0358354 52.0922414, 6.035836 52.0922822, 6.0358481 52.0923161, 6.0358538 52.0923315, " +
                "6.0358873 52.0923605, 6.0376211 52.0927082, 6.0379741 52.0927953, 6.0379461 52.0928399, " +
                "6.0376294 52.0927647, 6.0373903 52.0927095), (6.0391557 52.0929189, 6.0388667 52.0928373, " +
                "6.0387045 52.0928107, 6.038578 52.0927855, 6.0384897 52.0927195, 6.0384626 52.0927036, " +
                "6.0384412 52.0926911, 6.0382642 52.0926086, 6.0380309 52.092529, 6.0377877 52.0924683, " +
                "6.0377571 52.0924499, 6.0377263 52.0924189, 6.037857 52.0923747, 6.0383203 52.0923097, " +
                "6.0385012 52.0922528, 6.0385416 52.0922588, 6.0385632 52.0923458, 6.0386452 52.0924386, " +
                "6.0387875 52.0925001, 6.0391495 52.0926998, 6.0393437 52.0928496, 6.0393774 52.0928918, " +
                "6.0393715 52.092914, 6.0393239 52.0929308, 6.039246 52.0929349, 6.0391557 52.0929189), " +
                "(6.0377263 52.0924189, 6.0377571 52.0924499, 6.0377877 52.0924683, 6.0380309 52.092529, " +
                "6.0382642 52.0926086, 6.0384412 52.0926911, 6.0384626 52.0927036, 6.0384897 52.0927195, " +
                "6.038578 52.0927855, 6.0387045 52.0928107, 6.0388667 52.0928373, 6.0391557 52.0929189, " +
                "6.039246 52.0929349, 6.0393239 52.0929308, 6.0393715 52.092914, 6.0393774 52.0928918, " +
                "6.0393437 52.0928496, 6.0391495 52.0926998, 6.0387875 52.0925001, 6.0386452 52.0924386, " +
                "6.0385632 52.0923458, 6.0385416 52.0922588, 6.0385012 52.0922528, 6.0383203 52.0923097, " +
                "6.037857 52.0923747, 6.0377263 52.0924189))"
        )
        val polygon = SimpleWKTShapeParser.parse(wkt) as Polygon
        run {
            val ex = expectThrows(IllegalArgumentException::class) { Tessellator.tessellate(polygon, true) }
            assertEquals("Polygon ring self-intersection at lat=52.0924189 lon=6.0377263", ex!!.message)
        }
        run {
            val ex = expectThrows(IllegalArgumentException::class) { Tessellator.tessellate(polygon, false) }
            assertEquals("Unable to Tessellate shape. Possible malformed shape detected.", ex!!.message)
        }
    }

    @Test
    fun testLUCENE8559() {
        val wkt = "POLYGON((-0.1348674 51.7458255,-0.1345884 51.7455067,-0.1329898 51.745314,-0.1326358 51.745314,-0.1324105 51.744404,-0.131981 51.7444423,-0.1312196 51.7445102,-0.1310908 51.7456794,-0.1319706 51.7460713,-0.1343095 51.7465828,-0.1348674 51.7458255),(-0.1322388 51.7447959,-0.1322388 51.7454336,-0.1318633 51.7457126,-0.1313912 51.7456262,-0.1318985 51.7448032,-0.1322388 51.7447959))"
        checkPolygon(wkt)
    }

    @Test
    fun testLUCENE8556() {
        val wkt = (
            "POLYGON((-111.4765 68.321,-111.47625 68.32225,-111.4765 68.3225,-111.478 68.3225,-111.47825 68.32275,-111.479 68.32275,-111.47975 68.32325,-111.48125 68.324,-111.4815 68.32375,-111.48175 68.32375," +
                "-111.48225 68.32425,-111.48275 68.32425,-111.483 68.324,-111.4845 68.324,-111.48475 68.32425,-111.4845 68.32475,-111.48425 68.3245,-111.483 68.325,-111.4835 68.325,-111.48425 68.3255,-111.48525 68.3255,-111.4855 68.32575," +
                "-111.4855 68.32525,-111.486 68.32475,-111.48725 68.3245,-111.4875 68.32475,-111.48725 68.325,-111.487 68.325,-111.4865 68.32525,-111.487 68.32575,-111.486465 68.326385,-111.486 68.326,-111.48575 68.32625," +
                "-111.48525 68.32625,-111.485 68.326,-111.48375 68.326,-111.48225 68.3265,-111.483 68.3265,-111.48325 68.32675,-111.4835 68.3265,-111.48675 68.3265,-111.487 68.32675,-111.48675 68.32725,-111.4865 68.327," +
                "-111.48375 68.32775,-111.485 68.32775,-111.48525 68.3275,-111.4855 68.3275,-111.486 68.32775,-111.48625 68.3275,-111.48675 68.3275,-111.48725 68.327,-111.48775 68.327,-111.4875 68.32625,-111.488 68.32625," +
                "-111.48825 68.32675,-111.49025 68.327,-111.49025 68.32675,-111.4905 68.3265,-111.49075 68.3265,-111.49125 68.326,-111.492 68.32575,-111.4945 68.32575,-111.49475 68.3255,-111.49525 68.3255,-111.4955 68.32525,-111.49625 68.32525," +
                "-111.4965 68.325,-111.49775 68.32425,-111.498 68.3245,-111.4985 68.3245,-111.49875 68.32425,-111.49925 68.32425,-111.5005 68.324,-111.50075 68.32375,-111.501 68.32375,-111.501 68.323,-111.5015 68.323,-111.50175 68.32325,-111.5015 68.3235," +
                "-111.5025 68.32375,-111.50275 68.3235,-111.504 68.32375,-111.50425 68.3235,-111.50525 68.32325,-111.5055 68.3235,-111.506 68.3235,-111.50625 68.32325,-111.5065 68.3225,-111.5075 68.3225,-111.50775 68.32275,-111.50825 68.32275," +
                "-111.5085 68.3225,-111.50875 68.3225,-111.509 68.32275,-111.5125 68.32275,-111.51325 68.32225,-111.4765 68.321))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testInvalidPolygonCollinear() {
        val wkt = "POLYGON ((18.9401790919516 -33.9681188869036, 18.9401790919516 -33.9681188869036, 18.9401790919517 -33.9681188869036, 18.9401790919517 -33.9681188869036, 18.9401790919516 -33.9681188869036))"
        val polygon = SimpleWKTShapeParser.parse(wkt) as Polygon
        val ex = expectThrows(IllegalArgumentException::class) { Tessellator.tessellate(polygon, true) }
        assertEquals("at least three non-collinear points required", ex!!.message)
    }

    @Test
    fun testComplexPolygon01() {
        val wkt = (
            "POLYGON((58.8792517 54.9160937, 58.8762477 54.9154524, 58.8735011 54.9140217, 58.8726428 54.9127389, 58.8731146 54.9122507, 58.8741877 54.9120482, 58.8771918 54.9117028, 58.88011 54.913331, 58.8801175 54.9137036, 58.8805885 54.9143186, 58.8807109 54.9148604, 58.88011 54.915551, 58.8792517 54.9160937)," +
                "(58.8746003 54.9125589, 58.8766188 54.9137965, 58.8791419 54.9152275, 58.8798554 54.9151074, 58.8805548 54.9146087, 58.8801175 54.9137036, 58.8788867 54.9130833, 58.8790905 54.9128921, 58.8767533 54.9120561, 58.8748358 54.9122495, 58.8744557 54.9124049, 58.8746003 54.9125589))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon02() {
        val wkt = (
            "POLYGON((-0.5033651 48.7307175, -0.5036334 48.7300183, -0.5038592 48.7297349, -0.5044826 48.7295356, -0.5049852 48.72953, -0.504857 48.7301383, -0.5041382 48.7310084, -0.5033651 48.7307175)," +
                "(-0.504035 48.730838, -0.504282 48.730519, -0.504718 48.729958, -0.504778 48.72988, -0.504545 48.729797, -0.50448 48.729774, -0.503721 48.73073, -0.504035 48.730838)," +
                "(-0.50448 48.729774, -0.504545 48.729797, -0.504708 48.729597, -0.50458 48.729554, -0.504419 48.729753, -0.50448 48.729774))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon03() {
        val wkt = (
            "POLYGON((57.7258102 -20.1927474, 57.7257611 -20.192854, 57.7260971 -20.1929559, 57.726191 -20.1929232, 57.7262648 -20.1926211, 57.7262165 -20.1925544,57.7260649 -20.1924877, 57.7259684 -20.1924678, 57.7259333 -20.1925297, 57.7258102 -20.1927474)," +
                " (57.7259333 -20.1925297, 57.7258471 -20.1927671, 57.7259774 -20.1928078, 57.7260433 -20.1925557, 57.7259333 -20.1925297))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon04() {
        val wkt = (
            "POLYGON((139.2749646 36.2742799, 139.2747468 36.2743137, 139.2747057 36.2743705, 139.2745531 36.2743918, 139.2744944 36.2743563, 139.2719227 36.2747799, 139.2719021 36.2748249, 139.2723724 36.2762706, 139.2724692 36.2765445, 139.2725362 36.2765573, 139.2754328 36.2760613, 139.2749646 36.2742799)," +
                "(139.2726473 36.2762561, 139.2726277 36.2760151, 139.2723528 36.2760297, 139.2723724 36.2762706, 139.2726473 36.2762561))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon05() {
        val wkt = (
            "POLYGON((8.6778468 49.8622443, 8.6782001 49.8622443, 8.6786272 49.8622443, 8.6790127 49.8622444, 8.6790127 49.8620355, 8.678775 49.8620355, 8.6780348 49.8620354, 8.6778468 49.8620354, 8.6778468 49.8622443)," +
                " (8.6785777 49.8621738, 8.6785775 49.8620923, 8.678253 49.8620926, 8.6782532 49.8621741, 8.6785777 49.8621738)," +
                " (8.6781491 49.8621742, 8.6781491 49.8620925, 8.6779802 49.8620925, 8.6779802 49.8621742, 8.6781491 49.8621742))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon06() {
        val wkt = (
            "POLYGON((-77.578272 38.7906104, -77.5784061 38.7901379, -77.5785349 38.7897198, -77.5786743 38.7894522, -77.5787441 38.7892306, -77.578846 38.7891679," +
                " -77.5789104 38.7891762, -77.5789747 38.789239, -77.5789747 38.7893979, -77.5789694 38.789586, -77.5789104 38.7897449, -77.5789104 38.7898494," +
                " -77.5789104 38.7900083, -77.5789157 38.7901714, -77.5789157 38.7903052, -77.5790659 38.7903972, -77.5791786 38.7905101, -77.5792215 38.7905979," +
                " -77.5789962 38.7906439, -77.5787977 38.7905268, -77.5786529 38.7904724, -77.5785027 38.7905352, -77.578272 38.7906104))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon07() {
        val wkt = (
            "POLYGON((27.481388 53.871276, 27.481388 53.870876, 27.4809477 53.870876, 27.4808096 53.870876, 27.480293 53.870876, 27.480287 53.871276, 27.481388 53.871276)," +
                " (27.481145 53.870998, 27.481145 53.871173, 27.480674 53.871173,27.480674 53.870998, 27.481145 53.870998))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon08() {
        val wkt = (
            "POLYGON((27.473089 53.862247, 27.473089 53.86185, 27.4726752 53.86185,27.4726755 53.8617698, 27.4725118 53.8617698, 27.4725116 53.86185, 27.471994 53.86185, 27.471994 53.862247," +
                " 27.473089 53.862247), (27.472547 53.861969, 27.472847 53.861969, 27.472852 53.862163, 27.472375 53.862163, 27.472375 53.861969, 27.472547 53.861969))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon09() {
        val wkt = (
            "POLYGON((27.4822056 53.9262047, 27.482123 53.9262047, 27.4820878 53.9262047, 27.4816412 53.9262047, 27.4816412 53.9265967, 27.4821202 53.9265967, 27.4826562 53.9265967, 27.4826562 53.9262047," +
                " 27.4823321 53.9262047, 27.4822831 53.9262047, 27.4822056 53.9262047)," +
                " (27.482419 53.9263193, 27.482419 53.9265023, 27.4821217 53.9265023, 27.481969 53.9265023, 27.481969 53.9263193, 27.482419 53.9263193))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon10() {
        val wkt = (
            "POLYGON((12.3480275 49.1830779, 12.3481411 49.1830974, 12.3481318 49.1831254, 12.3482695 49.1831485, 12.348275 49.1831181, 12.3486026 49.1831619, 12.3486007 49.1831728, 12.3486919 49.1831838, 12.3487068 49.1831254, 12.3487505 49.1831275, 12.3487501 49.1831345, 12.3487603 49.1831348, 12.3487608 49.1831278, 12.3488143 49.1831172, 12.3488222 49.1831239, 12.348831 49.183119, 12.3488231 49.1831123, 12.3488259 49.1830731," +
                " 12.3488361 49.1830697, 12.348831 49.1830637, 12.3488198 49.183067, 12.3487724 49.1830393, 12.3487724 49.1830311, 12.3487631 49.1830317, 12.3487621 49.1830399, 12.348731 49.1830323, 12.3489338 49.1823572, 12.3489617 49.1823499, 12.3489841 49.1823372, 12.3489831 49.1823171, 12.3489738 49.1823025, 12.3489543 49.1822934, 12.3489217 49.1822915," +
                " 12.3489329 49.1822447, 12.3487124 49.1822222, 12.3486965 49.182228, 12.348115 49.1822167, 12.348128 49.1821559, 12.3479326 49.182131, 12.3479233 49.1821894, 12.3479168 49.1821711, 12.3478917 49.1821638, 12.3478573 49.1821699, 12.3478387 49.1821857, 12.3478405 49.1822046, 12.3478498 49.1822167, 12.3478722 49.1822253, 12.3478833 49.1822253, 12.347713 49.1828626, 12.3480806 49.1829168, 12.3480275 49.1830779)," +
                " (12.348571 49.1828869, 12.3487052 49.182425, 12.3480373 49.1823465, 12.34791 49.1828088, 12.3482676 49.1828517, 12.348571 49.1828869)," +
                " (12.3482676 49.1828517, 12.3482341 49.1829685, 12.348537 49.1830042, 12.348571 49.1828869, 12.3482676 49.1828517))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon11() {
        val wkt = (
            "POLYGON((-95.252045 42.897609, -95.251709 42.897569, -95.251523 42.897554, -95.25137 42.897559, -95.251315 42.897561, -95.250753 42.89763, -95.25024 42.897716, -95.249356 42.897835, -95.24884 42.897905, -95.248685 42.897924, -95.248686 42.89805, -95.248691 42.89843, -95.248693 42.898557, -95.234751 42.898871, -95.234631 42.890847, -95.237959 42.890779, -95.237885 42.886205, -95.249964 42.886255, -95.249943 42.894309, -95.248836 42.894259, -95.248759 42.895872, -95.252112 42.896047, -95.252045 42.897609)," +
                " (-95.248685 42.897924, -95.248686 42.897876, -95.248693 42.897732, -95.248696 42.897685, -95.248546 42.897171, -95.248097 42.89563, -95.247977 42.895217, -95.247948 42.895117, -95.247912 42.895, -95.247876 42.894882, -95.247835 42.89475, -95.247497 42.89365, -95.247449 42.893492, -95.247238 42.893441, -95.246999 42.893542, -95.246988 42.89369, -95.246984 42.893751, -95.24728 42.894877, -95.247289 42.89491, -95.247317 42.895016, -95.247345 42.895121, -95.247366 42.895203, -95.247384 42.895273, -95.247397 42.895323," +
                " -95.24752 42.895818, -95.247927 42.897456, -95.248063 42.898003, -95.248128 42.897991, -95.248154 42.897987, -95.24843 42.897953, -95.248523 42.897943, -95.248555 42.897938, -95.248652 42.897927, -95.248685 42.897924))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon12() {
        val wkt = (
            "POLYGON((-85.418489 41.768716, -85.418482 41.767212, -85.418481 41.766867, -85.408741 41.766911, -85.408745 41.763218, -85.41744 41.763171, -85.41744 41.763335, -85.418456 41.763335, -85.418455 41.763171, -85.420528 41.763171, -85.420843 41.766839, -85.420937 41.768716, -85.418489 41.768716)," +
                " (-85.418481 41.766867, -85.419141 41.766859, -85.419173 41.766858, -85.41923 41.766313, -85.418477 41.766272, -85.418481 41.766867))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon13() {
        val wkt = (
            "POLYGON((30.6852741 59.9232998, 30.6856122 59.9236242, 30.6859407 59.9236291, 30.6863851 59.9235177, 30.6867039 59.9233144, 30.6866169 59.9231159, 30.6864044 59.9229464, 30.6860566 59.9227285, 30.6855736 59.9228496, 30.6850036 59.9228012, 30.6851775 59.9229755, 30.6851496 59.9229971, 30.6850712 59.9230578, 30.6847911 59.923019, 30.6849843 59.923174, 30.6851872 59.9232078, 30.685361 59.9232127, 30.6852741 59.9232998)," +
                " (30.6851678 59.9231308, 30.6852544 59.9231618, 30.6853904 59.923171, 30.6855264 59.9231927, 30.6856625 59.9231865, 30.6857366 59.9232113, 30.6858912 59.923171, 30.6858418 59.9231122, 30.6857366 59.9230936, 30.6857181 59.9230223, 30.6856254 59.9229541, 30.6854399 59.9229634, 30.6853409 59.9229603, 30.6853162 59.9230037, 30.6851496 59.9229971, 30.6851431 59.9230657, 30.6851678 59.9231308))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon14() {
        val wkt = (
            "POLYGON((-2.7996138 53.4243001, -2.7995616 53.4243095, -2.7995084 53.4243189, -2.7994612 53.4243274, -2.7995377 53.4243807, -2.7995906 53.4243689, -2.7996138 53.4243001)," +
                " (-2.7995616 53.4243095, -2.7995429 53.4243345, -2.7995084 53.4243189, -2.7995616 53.4243095))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon15() {
        val wkt = (
            "POLYGON((5.3247527 61.4108691, 5.3247243 61.4105839, 5.3250792 61.4107616, 5.325961 61.4108553, 5.3266624 61.4110128, 5.3270003 61.4110466, 5.3274267 61.4111918, 5.3274094 61.4112734," +
                " 5.3275956 61.411337, 5.328454 61.4117214, 5.3288879 61.4117593,5.3293803 61.4119717, 5.3292581 61.412102, 5.3294948 61.4124709, 5.3288962 61.4128764, 5.3282449 61.4129021," +
                " 5.3274134 61.4130613, 5.3271761 61.413222, 5.3263619 61.413395,5.3263619 61.413395, 5.3258351 61.4131221, 5.3255073 61.4131218, 5.325332 61.4129946, 5.3253043 61.4127856," +
                " 5.3250305 61.4128579, 5.3245279 61.4126489, 5.3244206 61.4124399, 5.3244415 61.4122399, 5.324192 61.4118966, 5.3242034 61.4117109, 5.3244695 61.4115646, 5.3250112 61.4113443, 5.3251052 61.4111494, 5.3247527 61.4108691))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon16() {
        val wkt = (
            "POLYGON((34.6110434 62.1752511, 34.6109864 62.1751687, 34.6115575 62.1749522, 34.6112716 62.1749876, 34.6109715 62.1750879," +
                " 34.6100197 62.1751666, 34.6101212 62.1750403, 34.6120273 62.1747823, 34.6122303 62.1746507, 34.6122529 62.1745243, 34.6126928 62.1743506," +
                " 34.6127717 62.1742295, 34.6133808 62.1740189, 34.6134823 62.1737767, 34.6077526 62.174577, 34.6077301 62.1745138, 34.6133695 62.1737135, " +
                "34.6133357 62.1736451, 34.6115085 62.1734924, 34.6100986 62.1737399, 34.6094445 62.1737715, 34.6093204 62.1737293, 34.6102227 62.1735082, " +
                "34.6100535 62.1731765, 34.6099069 62.1731081, 34.6093204 62.1730133, 34.6092414 62.1733081, 34.6079556 62.1742664, 34.6077075 62.1743453, " +
                "34.6070646 62.1749034, 34.6070082 62.1751614, 34.6065683 62.1757352, 34.6063428 62.1760353, 34.6063879 62.1762669, 34.606027 62.1767986, " +
                "34.6054292 62.1772987, 34.6050795 62.1773987, 34.604572 62.1775251, 34.6046848 62.177662, 34.6052374 62.1776409, 34.605948 62.1773987, " +
                "34.6066022 62.1770671, 34.6076962 62.1765564, 34.6078654 62.1761511, 34.6080684 62.1759247, 34.6082038 62.1755667, 34.6085524 62.1755425, " +
                "34.6090384 62.1755088, 34.6110434 62.1752511)," +
                " (34.6098618 62.1749455, 34.6119935 62.1745664, 34.6120386 62.1744559, 34.6098505 62.1748665, 34.6098618 62.1749455), " +
                " (34.6098731 62.1745717, 34.6119596 62.174219, 34.6119935 62.17414, 34.6098731 62.1745085, 34.6098731 62.1745717)," +
                " (34.6086549 62.1754193, 34.6086211 62.1745717, 34.6084632 62.1746296, 34.6085309 62.1754351, 34.6086549 62.1754193)," +
                " (34.6091963 62.1753298, 34.6091286 62.174577, 34.608982 62.1745822, 34.6090723 62.1753877, 34.6091963 62.1753298)," +
                " (34.6097264 62.1751508, 34.60967 62.1745717, 34.6095347 62.1745717, 34.6095798 62.1751508, 34.6097264 62.1751508))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon17() {
        val wkt = (
            "POLYGON((14.1989238 40.8274753, 14.1990593 40.8275004, 14.1991793 40.8275226, 14.1993451 40.8275478, 14.1993761 40.8275525, 14.1994599 40.8275746, 14.1996909 40.8276174, 14.1996769 40.8276728, 14.1993975 40.8277665, " +
                "14.1993717 40.8277752, 14.1992074 40.8278304, 14.1990929 40.8278688, 14.1989635 40.8279122, 14.1988594 40.8276864, 14.1989238 40.8274753), (14.1993717 40.8277752, 14.1993975 40.8277665, 14.1995864 40.8276576, 14.1994599 40.8275746," +
                " 14.1993761 40.8275525, 14.1993451 40.8275478, 14.1993073 40.8276704, 14.1993717 40.8277752), (14.1990593 40.8275004, 14.1989907 40.8276889, 14.1990929 40.8278688, 14.1992074 40.8278304, 14.1991335 40.8276763, 14.1991793 40.8275226, 14.1990593 40.8275004))"
        )
        val polygon = SimpleWKTShapeParser.parse(wkt) as Polygon
        val ex = expectThrows(IllegalArgumentException::class) { Tessellator.tessellate(polygon, true) }
        assertEquals(
            "Polygon ring self-intersection at lat=40.8278688 lon=14.1990929",
            ex!!.message
        )
    }

    @Test
    fun testComplexPolygon18() {
        val wkt = (
            "POLYGON((-6.0057153 37.378144, -6.0056993 37.3781273, -6.005663 37.3781481, -6.0056241 37.3781101, -6.0056938 37.3780656, " +
                "-6.0057319 37.3781066, -6.0057619 37.3780888, -6.0057645 37.3780916, -6.0057775 37.3781049, -6.0057153 37.378144), " +
                "(-6.0056993 37.3781273, -6.0057275 37.3781093, -6.0057052 37.3780871, -6.005677 37.378105, -6.0056993 37.3781273))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon19() {
        val wkt = (
            "POLYGON((60.3629011 55.1038828,60.3686333 55.0945319, 60.3696616 55.0944318, 60.3701429 55.094269, 60.3707555 55.094269, 60.3719807 55.0942941, 60.373184 55.0941939, 60.3738841 55.0938559, 60.3741685 55.0938809, 60.3752406 55.0940311, 60.3760938 55.0940687, 60.3765751 55.0941188, 60.3789161 55.1022181, 60.3629011 55.1038828)," +
                " (60.3685348 55.098134, 60.3685348 55.0980714, 60.3681634 55.0980759, 60.3681629 55.0980119, 60.3681738 55.0979431, 60.3682285 55.0978304, 60.3681848 55.0976426, 60.3681902 55.0974298, 60.3682887 55.0972671, 60.368409 55.0972264, 60.3685786 55.0972858, 60.3687044 55.0973234, 60.3688083 55.0972639, 60.368956 55.0972639, 60.3692185 55.0972545, 60.3692294 55.0973328, 60.3692732 55.0975612, 60.369306 55.0977177, 60.369306 55.0979681, 60.3690654 55.0980682, 60.3688411 55.0981308, 60.3685348 55.098134), " +
                "(60.3680535 55.098256, 60.3685348 55.0982529, 60.3685348 55.098134, 60.3685348 55.0980714, 60.3681634 55.0980759, 60.3680261 55.0980776, 60.3680535 55.098256))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon20() {
        val wkt = (
            "POLYGON((11.4224981 52.1936005, 11.4228777 52.1934599, 11.4231781 52.1933004, 11.424204 52.192568, 11.4236675 52.1919366, 11.4234208 52.1912986, 11.4233564 52.1909237, 11.4223763 52.1907738, 11.4217128 52.1907656, 11.4216977 52.1908798, 11.421629 52.1923707, 11.422541 52.1924299, 11.422777 52.1927784, 11.4226268 52.1934559, 11.4224981 52.1936005), " +
                "(11.4230184 52.1931194, 11.4229045 52.1928061, 11.4228337 52.1924324, 11.4230153 52.192289, 11.4233217 52.1919891, 11.4233614 52.1919891, 11.4234102 52.1919891, 11.4238071 52.1925876, 11.4232185 52.1930477, 11.4230184 52.1931194), " +
                "(11.4233029 52.1918642, 11.4233614 52.1919891, 11.4233217 52.1919891, 11.423267 52.191863, 11.4230829 52.191851, 11.4228576 52.1916768, 11.4219593 52.191568, 11.4217993 52.1914605, 11.4218547 52.1910641, 11.4225773 52.1909533, 11.4229569 52.1910092, 11.423142 52.1911144, 11.4233029 52.1918642))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon21() {
        val wkt = (
            "POLYGON((-8.8695167 38.5283886, -8.8695085 38.5280497, -8.8692041 38.5280497, -8.869208 38.528419, -8.8692324 38.5284411, -8.8693155 38.5284589, -8.8694778 38.5284138, -8.8695167 38.5283886)," +
                " (-8.8693914 38.5283407, -8.8692384 38.5283407, -8.8692383 38.5281424, -8.8693914 38.5281424, -8.8693914 38.5283297, -8.8693914 38.5283407)," +
                " (-8.8694452 38.5283297, -8.8693914 38.5283297, -8.8693914 38.5281424, -8.8693914 38.5281131, -8.8694451 38.5281131, -8.8694452 38.5283297))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon22() {
        val wkt = (
            "POLYGON((64.0209362 61.4681776, 64.0210248 61.4682157, 64.0211071 61.4682512, 64.0212391 61.468193, 64.021904 61.4681913, 64.0220258 61.468256, 64.0221224 61.4682435, 64.022299 61.4682161, 64.0222172 61.4681665, 64.0221553 61.4681319, 64.0218224 61.4679859, 64.0216788 61.4679836, 64.0216784 61.4679438, 64.0216361 61.4679187, 64.0215193 61.4679187, 64.0214889 61.4679414, 64.0214838 61.4679883, 64.021362 61.4679891, 64.0209362 61.4681776)," +
                " (64.0215237 61.4680208, 64.021635 61.4680208, 64.021635 61.4680058, 64.021635 61.4679288, 64.0215237 61.4679288, 64.0215237 61.4680058, 64.0215237 61.4680208)," +
                " (64.0215227 61.46806, 64.0215227 61.4681552, 64.0216321 61.4681552, 64.0216321 61.46806, 64.021725 61.46806, 64.021725 61.4680058, 64.021635 61.4680058, 64.021635 61.4680208, 64.0215237 61.4680208, 64.0215237 61.4680058, 64.0214238 61.4680058, 64.0214238 61.46806, 64.0215227 61.46806))"
        )
        checkPolygon(wkt)
    }

    @Ignore // TODO implement later
    @Test
    fun testComplexPolygon23() {
    }

    @Test
    fun testComplexPolygon24() {
        val wkt = (
            "POLYGON((130.67658 33.4549747, 130.6766161 33.454976, 130.6766609 33.4549775, 130.6766642 33.454912, 130.6766212 33.4549105, 130.6766102 33.4549066, 130.6766061 33.454879, 130.6765768 33.4548779, 130.6765765 33.4548831," +
                " 130.6765691 33.4548828, 130.6765693 33.4548793, 130.6765507 33.4548786, 130.6765509 33.4548761, 130.6765281 33.4548753, 130.6765273 33.4548919, 130.6765322 33.454892, 130.6765315 33.4549065, 130.6765323 33.4549065," +
                " 130.6765321 33.4549107, 130.6765257 33.4549105, 130.6765238 33.454949, 130.6765515 33.45495, 130.6765512 33.4549572, 130.6765808 33.4549583, 130.67658 33.4549747)," +
                " (130.6765844 33.4549234, 130.6765847 33.4549188, 130.6765847 33.4549188, 130.6765844 33.4549234))"
        )
        val polygon = SimpleWKTShapeParser.parse(wkt) as Polygon
        expectThrows(IllegalArgumentException::class) {
            Tessellator.tessellate(polygon, random().nextBoolean())
        }
    }

    @Test
    fun testComplexPolygon25() {
        val wkt = (
            "POLYGON((33.3275991 -8.9353026, 33.3276122 -8.9353021, 33.3276139 -8.9353425, 33.3276095 -8.9353427, 33.3276107 -8.9353706, 33.3276074 -8.9353707, 33.3276087 -8.9354024, 33.3275766 -8.9354038, 33.3275753 -8.9353739," +
                " 33.3275354 -8.9353756, 33.3275342 -8.9353464, 33.3275184 -8.935347, 33.3275167 -8.9353066, 33.3275381 -8.9353057, 33.3275375 -8.9352901, 33.3275598 -8.9352892, 33.3275594 -8.9352808, 33.3275981 -8.9352792, 33.3275991 -8.9353026)," +
                " (33.3275601 -8.9353046, 33.3275599 -8.9352988, 33.3275601 -8.9353046, 33.3275601 -8.9353046))"
        )
        val polygon = SimpleWKTShapeParser.parse(wkt) as Polygon
        expectThrows(IllegalArgumentException::class) {
            Tessellator.tessellate(polygon, random().nextBoolean())
        }
    }

    @Test
    fun testComplexPolygon26() {
        val wkt = (
            "MULTIPOLYGON(((6.9731246 51.6251295,6.9730244 51.6251554,6.9729251 51.6251578,6.9728319 51.6251448,6.9727549 51.6251233,6.9727002 51.625087,6.9726832 51.6250387,6.9727017 51.6250038,6.9734774 51.6243338,6.973492 51.6243185," +
                "6.9735143 51.6243071,6.9735575 51.6242956,6.9736068 51.6243037,6.9738517 51.6244209,6.9739079 51.624452,6.9739256 51.6244816,6.9739272 51.624506,6.973911 51.6245399,6.973646 51.6247551,6.973586 51.6248025,6.973519 51.6248398,6.9734435 51.6248852," +
                "6.973388 51.6249344,6.9733141 51.6250411,6.9732586 51.6250913,6.9731893 51.6251238,6.9731246 51.6251295)," +
                "(6.9731928 51.6247753,6.9731161 51.624802,6.9729805 51.6248665,6.9729205 51.6249144,6.9728943 51.6249694,6.9729074 51.6250196,6.9729436 51.625064," +
                "6.9730029 51.6251047,6.9730799 51.6251272,6.9731246 51.6251295,6.9732016 51.6250865,6.973244 51.6250286,6.9732763 51.6249588,6.9732886 51.6248842,6.9732963 51.6248216,6.9732917 51.6248096,6.9732817 51.6248345,6.9732748 51.6248995,6.9732455 51.6249368," +
                "6.9731762 51.6249789,6.9731576 51.6249947,6.9731693 51.6248976,6.97319 51.6247819,6.9731928 51.6247753)," +
                "(6.9731928 51.6247753,6.9732363 51.6247413,6.9733118 51.6246748,6.9733795 51.6246404,6.9734519 51.6245992,6.9735097 51.6245538,6.9734874 51.6245404,6.9734573 51.6245127,6.9734581 51.6244907,6.9734774 51.6244543,6.9735344 51.6243931,6.9735236 51.6243946," +
                "6.9734943 51.6244161,6.9734504 51.6244543,6.9733811 51.6245275,6.9732987 51.6246064,6.9732586 51.6246518,6.9732162 51.6247183,6.9731928 51.6247753)," +
                "(6.9735097 51.6245538,6.9736199 51.624605,6.9736853 51.6246203,6.9737516 51.6246231,6.9738024 51.6246107,6.9738324 51.6245878,6.9738425 51.6245509,6.9738332 51.6245122,6.9738039 51.6244869,6.9737616 51.6244687,6.9737061 51.6244625,6.9736445 51.6244749,6.9735736 51.6245046,6.9735097 51.6245538))," +
                "((6.9731576 51.6249947,6.9731361 51.6250664,6.9731161 51.6251037,6.9731022 51.6250803,6.9731277 51.62502,6.9731576 51.6249947)))"
        )
        val polygons = SimpleWKTShapeParser.parse(wkt) as Array<Polygon>
        checkMultiPolygon(polygons, 0.0)
    }

    @Test
    fun testComplexPolygon27() {
        val wkt = (
            "POLYGON((-81.9197777 32.1606889, -81.9208459 32.1614027, -81.9218128 32.1625683, -81.9217233 32.1641908, -81.9206653 32.1644687, -81.9199227 32.1644768, -81.919507 32.1652893, -81.9194166 32.1668237, -81.9196435 32.1682649, " +
                "-81.9197542 32.1687152, -81.9193309 32.1688085, -81.9189093 32.1690825, -81.9180624 32.1692691, -81.9166876 32.16973, -81.9166906 32.1700009, -81.9200053 32.1725022, -81.9205426 32.1731301, -81.920549 32.1737617, " +
                "-81.9178035 32.1750446, -81.9170662 32.1755912, -81.9155919 32.1766844, -81.9143178 32.1766031, -81.914088 32.1748909, -81.9137658 32.1745325, -81.9111045 32.1736493, -81.9100176 32.1711314, -81.9094835 32.1707767, " +
                "-81.9079966 32.1706066, -81.9046131 32.1718045, -81.9037545 32.1708181, -81.9050084 32.1689149, -81.9052123 32.1681017, -81.9051941 32.1652, -81.9029677 32.1652419, -81.8968028 32.1653673, -81.8951044 32.1652887, " +
                "-81.8948798 32.1640275, -81.8956041 32.1622183, -81.8959115 32.1611335, -81.8975012 32.1609418, -81.8979156 32.1599466, -81.898968 32.1591269, -81.8989561 32.1579545, -81.8957748 32.1580697, -81.8962963 32.1571635, " +
                "-81.8964984 32.1561697, -81.89649 32.155358, -81.8968019 32.1547247, -81.8975401 32.154268, -81.900716 32.1536142, -81.9014396 32.1517146, -81.9047425 32.1531344, -81.9072972 32.1540158, -81.9072132 32.1561818, " +
                "-81.9082779 32.156535, -81.9097676 32.156975, -81.9103042 32.1576029, -81.9105275 32.1586835, -81.911802 32.1588551, -81.9126231 32.1561425, -81.9122938 32.1550627, -81.9119664 32.1541629, -81.9126021 32.1540681, " +
                "-81.9137678 32.1539695, -81.9154642 32.1538671, -81.9159939 32.1537731, -81.9183302 32.1540263, -81.9189767 32.1550118, -81.9191927 32.155371, -81.9196179 32.1554583, -81.9198383 32.1562684, -81.9211357 32.1586041, " +
                "-81.9249461 32.1577645, -81.9255824 32.1577599, -81.9256923 32.1581198, -81.9264468 32.1592869, -81.9246484 32.1597514, -81.9243348 32.1602047, -81.9207271 32.1601408, -81.9197777 32.1606889), " +
                "(-81.9197777 32.1606889, -81.9176617 32.1612454, -81.9161794 32.1615269, -81.9158703 32.1624312, -81.9156776 32.164327, -81.9154878 32.1664932, -81.9170807 32.1666603, -81.9172827 32.1656687, -81.9174819 32.1644039, -81.9192724 32.1631284, -81.9197777 32.1606889), " +
                "(-81.9023354 32.1563966, -81.902532 32.1548643, -81.9034866 32.1548548, -81.9042322 32.1551206, -81.9044708 32.1577348, -81.9057444 32.1578156, -81.9062758 32.1579022, -81.9067039 32.1582599, -81.9070442 32.1604224, -81.9101224 32.1605786, -81.9104441 32.160937, " +
                "-81.910352 32.1622913, -81.9090818 32.1625707, -81.9057958 32.1628676, -81.9032505 32.1629757, -81.9031317 32.1617138, -81.901008 32.1615485, -81.9013139 32.160283, -81.9025866 32.1602741, -81.902572 32.1588308, -81.9023354 32.1563966))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon28() {
        val wkt = (
            "POLYGON((-68.206957 49.5, -68.2084578 49.5, -68.209709 49.5, -68.2095384 49.4994267, -68.209625 49.4992348, -68.210007 49.4989218, -68.210023 49.4987883, -68.2096826 49.4986001, -68.2094519 49.4983847, " +
                "-68.2093766 49.4982739, -68.2093156 49.4980982, -68.2093356 49.498025, -68.2093107 49.4979289, -68.2092162 49.4977138, -68.2092657 49.4973334, -68.2092317 49.4970964, -68.2089469 49.4967172, -68.2088447 49.4966676, " +
                "-68.2083464 49.4969072, -68.2082338 49.4969829, -68.2081498 49.4972151, -68.2081795 49.4974804, -68.2081717 49.4976459, -68.2080004 49.4979611, -68.2077763 49.4981327, -68.2073525 49.4983742, -68.2071536 49.4985531, " +
                "-68.2070131 49.4985812, -68.2067493 49.498524, -68.2064765 49.4986121, -68.2064173 49.4986541, -68.206208 49.4989583, -68.2061419 49.4989883, -68.2057963 49.4990059, -68.2056593 49.4991831, -68.2055727 49.499375, " +
                "-68.2055949 49.4994309, -68.2056537 49.4994776, -68.2059649 49.4995981, -68.2060542 49.4997327, -68.206666 49.5, -68.206775 49.5, -68.206957 49.5), (-68.206957 49.5, -68.2068746 49.4999721, -68.2069691 49.499901, " +
                "-68.2072345 49.4998896, -68.2073016 49.4999684, -68.2072524 49.4999738, -68.2072032 49.4999792, -68.206957 49.5), " +
                "(-68.2071295 49.4995135, -68.2071026 49.4995747, -68.206831 49.499683, -68.2065151 49.4996796, -68.2064171 49.4996017, -68.2064693 49.4995478, -68.2067 49.4994769, -68.2068784 49.4994599, -68.207103 49.499486, -68.2071295 49.4995135))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon29() {
        val wkt = (
            "POLYGON((-81.36913 28.589541, -81.369566 28.589542, -81.372775 28.589552, -81.373184 28.589553, -81.373245 28.589608, -81.3732717 28.591233, -81.373274 28.591373, -81.3732974 28.5930032, " +
                "-81.3732474 28.5930567, -81.370891 28.593039, -81.370844 28.593039, -81.370841 28.593038, -81.370801 28.593038, -81.370798 28.593037, -81.370628 28.593033, -81.370321 28.593017, -81.3698235 28.5929986, " +
                "-81.3691812 28.592994, -81.3691723 28.5924913, -81.3691603 28.5918073, -81.3696538 28.5918014, -81.3696565 28.5916848, -81.3696484 28.5915517, -81.3696001 28.5912644, -81.3695827 28.5911137, " +
                "-81.3691482 28.5911149, -81.3691442 28.5904248, -81.36913 28.589541), (-81.3717082 28.5913906, -81.3717104 28.5915295, -81.3712894 28.5915295, -81.3712866 28.5913906, -81.3717082 28.5913906), " +
                "(-81.37226 28.591612, -81.371836 28.59161, -81.371841 28.591884, -81.3722601 28.5918808, -81.37226 28.591612), " +
                "(-81.372258 28.591474, -81.3726774 28.5914737, -81.3726754 28.5916118, -81.37226 28.591612, -81.372258 28.591474), " +
                "(-81.3722683 28.592167, -81.3718455 28.5921684, -81.371852 28.592584, -81.372276 28.592585, -81.3722683 28.592167))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon30() {
        val wkt = (
            "POLYGON((-118.1288162 34.1527018, -118.1288162 34.1526725, -118.1288002 34.1526725, -118.1288001 34.1526511, -118.1287859 34.1526382, -118.1287859 34.1526293, -118.1288001 34.1526218, -118.1288 34.1525913, -118.1288093 34.1525912, -118.1288093 34.1525831, " +
                "-118.1288 34.1525831, -118.1288 34.1525544, -118.1287852 34.1525469, -118.1287852 34.1525375, -118.1287999 34.1525259, -118.1287999 34.1524997, -118.1288091 34.1524997, -118.1288091 34.1524966, -118.1288479 34.1524965, -118.1288479 34.1524996, " +
                "-118.1288701 34.1524996, -118.1288701 34.1524965, -118.1289107 34.1524965, -118.1289107 34.1524996, -118.1289174 34.1524996, -118.1289175 34.1525129, -118.1289384 34.1525128, -118.1289384 34.1524995, -118.1289654 34.1524995, -118.1289654 34.1524964, " +
                "-118.1290406 34.1524963, -118.1290406 34.1524994, -118.1290858 34.1524994, -118.1290875 34.1524901, -118.129108 34.1524901, -118.1291127 34.1524993, -118.1292449 34.1524992, -118.1292498 34.1525125, -118.1292498 34.1525084, -118.1292726 34.1525084, -118.1292727 34.1525621, " +
                "-118.1292992 34.1525621, -118.1292992 34.1526061, -118.1292727 34.1526061, -118.1292727 34.1525693, -118.1292499 34.1525693, -118.1292499 34.1525805, -118.1292678 34.1525805, -118.1292678 34.1526087, -118.129306 34.1526086, -118.129306 34.1526111, -118.1293085 34.1526111, " +
                "-118.1293087 34.1527887, -118.1292798 34.1527888, -118.1292798 34.1527862, -118.1292703 34.1527862, -118.1292689 34.1527898, -118.1292578 34.1527972, -118.1292472 34.1527963, -118.1292378 34.1527863, -118.129209 34.1527863, -118.129209 34.1527898, -118.1291961 34.1527898, " +
                "-118.1291961 34.1527863, -118.1291611 34.1527863, -118.1291566 34.1527966, -118.1291403 34.1527965, -118.1291313 34.1527864, -118.1290711 34.1527864, -118.1290743 34.1527922, -118.1290617 34.1527983, -118.1290498 34.152793, -118.1290521 34.1527864, -118.1290078 34.1527865, " +
                "-118.1290077 34.1527804, -118.1289997 34.1527804, -118.1289997 34.1527891, -118.1289639 34.1527891, -118.1289573 34.1527994, -118.1289431 34.1527993, -118.1289356 34.1527891, -118.1288754 34.1527892, -118.1288754 34.1527941, -118.1288666 34.1527999, -118.1288552 34.1527999, " +
                "-118.1288478 34.1527939, -118.1288478 34.1527892, -118.1288004 34.1527893, -118.1288002 34.1527018, -118.1288162 34.1527018), (-118.1289329 34.1525558, -118.1289331 34.1526612, -118.1289386 34.1526786, -118.1289386 34.1526208, -118.1289484 34.1526208, -118.1289484 34.1525972, " +
                "-118.1289385 34.1525972, -118.1289385 34.1525558, -118.1289329 34.1525558), " +
                "(-118.1289577 34.1526842, -118.1289867 34.1526842, -118.1289867 34.1526898, -118.129055 34.1526897, -118.129055 34.1526596, -118.1290352 34.1526596, -118.1290353 34.1526785, -118.1289386 34.1526786, -118.1289577 34.1526842), " +
                "(-118.1292235 34.1525908, -118.1292235 34.1525969, -118.129218 34.1525969, -118.129218 34.1526087, -118.1292278 34.1526087, -118.1292278 34.1525908, -118.1292235 34.1525908), " +
                "(-118.1290728 34.1526595, -118.1290728 34.1526508, -118.1290679 34.1526508, -118.1290679 34.1526595, -118.1290728 34.1526595), (-118.1291115 34.1526447, -118.1291546 34.1526446, -118.1291547 34.1526753, -118.1291664 34.1526753, -118.1291663 34.1526113, -118.1291626 34.1526062, -118.1290881 34.1526063, -118.1290795 34.1526114, -118.1290795 34.1526508, -118.1291116 34.1526508, -118.1291115 34.1526447), " +
                "(-118.1290678 34.1525971, -118.1290881 34.1525971, -118.1290794 34.1525879, -118.1290124 34.152588, -118.1290124 34.1526064, -118.1290678 34.1526063, -118.1290678 34.1525971), (-118.1288586 34.1526756, -118.1288586 34.1526787, -118.1288937 34.1526786, -118.128906 34.1526756, -118.1288586 34.1526756), (-118.1291835 34.1526087, -118.1291835 34.1526277, -118.1292088 34.1526277, -118.1292087 34.1526087, -118.1291835 34.1526087), " +
                "(-118.1291861 34.152686, -118.1292181 34.152686, -118.1292181 34.1526824, -118.1291861 34.1526824, -118.1291861 34.152686))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon31() {
        val wkt = (
            "POLYGON((33.2851247 64.3962413, 33.2853164 64.3964752, 33.2855082 64.396563, 33.2858465 64.3965825, 33.2861736 64.3964899, " +
                "33.2865571 64.396329, 33.286997 64.3961633, 33.2872677 64.396251, 33.2873466 64.3962072, 33.2870534 64.395905, 33.2866361 64.3956807, 33.2861511 64.3955638, " +
                "33.2856435 64.3956174, 33.2852826 64.3957149, 33.2851247 64.3958562, 33.2851247 64.396134, 33.2851247 64.3962413), " +
                "(33.2851247 64.396134, 33.2854405 64.3962023, 33.2860157 64.3958172, 33.2858578 64.3956807, 33.2853164 64.3958221, 33.2851247 64.396134), " +
                "(33.2857563 64.3963875, 33.2859932 64.396446, 33.2861736 64.3963534, 33.2859706 64.3962851, 33.2857225 64.3963095, 33.2857563 64.3963875))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon32() {
        val wkt = (
            "POLYGON((-94.1396281 47.8427276, -94.1394597 47.8318694, -94.1401176 47.8173121, -94.1395648 47.8062658, -94.1343888 47.8063357, -94.1346412 47.8136767, -94.1293684 47.8137221, -94.1292883 47.8100637, -94.1241003 47.8101206, -94.1240711 47.8028274, -94.1018162 47.8025521, " +
                "-94.1016856 47.7989284, -94.0962427 47.7990633, -94.0958641 47.7919119, -94.090393 47.7919809, -94.0901788 47.7883992, -94.0956694 47.7883497, -94.0953154 47.7736816, -94.1009001 47.773599, -94.1007919 47.7773656, -94.1011601 47.7882999, -94.1224262 47.7882635, " +
                "-94.1278201 47.7882045, -94.128157 47.791947, -94.1334767 47.7919893, -94.1340009 47.7990339, -94.1391714 47.7989574, -94.1392586 47.8025871, -94.1445192 47.802501, -94.1441646 47.7952601, -94.1495363 47.7952326, -94.1498918 47.8024807, -94.1553562 47.8024703, " +
                "-94.1555675 47.806059, -94.150131 47.8061278, -94.1506011 47.8129253, -94.1501789 47.8129684, -94.149611 47.8132643, -94.1491352 47.813398, -94.1489002 47.8135939, -94.1488101 47.8138527, -94.1488665 47.8142391, -94.1483486 47.8146313, -94.1482663 47.8152448, " +
                "-94.1483213 47.8155667, -94.1490605 47.817251, -94.1497062 47.8182566, -94.1498362 47.8193197, -94.1499652 47.8195646, -94.150403 47.8213749, -94.1507045 47.821924, -94.1508205 47.8222638, -94.151727 47.8234564, -94.15213 47.8236878, -94.1524748 47.8240132, " +
                "-94.1531753 47.8251591, -94.1537606 47.8265457, -94.1541208 47.8270211, -94.1545129 47.8273013, -94.1546514 47.8275679, -94.1551127 47.8277094, -94.1552844 47.8278376, -94.1554978 47.828217, -94.1561502 47.8288194, -94.1562033 47.8290381, -94.1567283 47.8298772, " +
                "-94.1570108 47.8302438, -94.1572449 47.8303308, -94.1579044 47.8312801, -94.1588831 47.8316117, -94.1589829 47.8317057, -94.1589776 47.8319543, -94.1592481 47.8324046, -94.1601486 47.8333603, -94.1612329 47.8342848, -94.1619696 47.8351853, -94.155575 47.8352963, " +
                "-94.1556138 47.8388745, -94.144871 47.8390595, -94.144906 47.8426792, -94.1396281 47.8427276), (-94.1340009 47.7990339, -94.1288303 47.7991103, -94.1291281 47.8027466, -94.1342625 47.802665, -94.1340009 47.7990339), " +
                "(-94.1013659 47.7924644, -94.1014295 47.792468, -94.102571 47.7924213, -94.1027201 47.7923202, -94.1027617 47.7920166, -94.1026243 47.7918031, -94.1024919 47.7911957, -94.102004 47.7901082, -94.1018445 47.7888476, -94.1017758 47.7887408, -94.101548 47.7886445, " +
                "-94.1013617 47.7886284, -94.1006145 47.7891011, -94.1005105 47.7892095, -94.1004868 47.789344, -94.1007015 47.790076, -94.1011754 47.7905011, -94.1012329 47.7907064, -94.1011431 47.7908595, -94.1009054 47.7909244, -94.1007312 47.7908545, -94.1005935 47.7906231, " +
                "-94.100326 47.7905361, -94.0999407 47.7905308, -94.0998106 47.7906151, -94.1000388 47.7906356, -94.0993399 47.790923, -94.0992874 47.7910474, -94.0994397 47.7913413, -94.099697 47.7915716, -94.0997034 47.7918759, -94.0998534 47.7920624, -94.1005516 47.7924138, -94.1013659 47.7924644))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon33() {
        val wkt = (
            "POLYGON((110.3240182 -7.8006815, 110.3235448 -7.8007665, 110.3233914 -7.8012355, 110.323407 -7.801519, 110.3233706 -7.8015241, 110.3232692 -7.8018926, 110.3234616 -7.8021632, 110.3235813 -7.8025213, 110.3238986 -7.8026038, 110.3238569 -7.8025316, " +
                "110.3238439 -7.8021941, 110.3237321 -7.8021193, 110.323948 -7.8019802, 110.3240936 -7.8021116, 110.3244603 -7.8020137, 110.3244187 -7.80189, 110.3242991 -7.8016865, 110.3242133 -7.8016143, 110.324078 -7.8015293, 110.3239766 -7.8014803, " +
                "110.3239324 -7.8014133, 110.3239116 -7.8012458, 110.3239532 -7.8011015, 110.323987 -7.8009907, 110.3240182 -7.8006815), " +
                "(110.3235776 -7.8007793, 110.3239413 -7.800712, 110.3239467 -7.8008326, 110.3235594 -7.8008779, 110.3235776 -7.8007793), " +
                "(110.3235182 -7.8009198, 110.3239302 -7.8008615, 110.3239391 -7.8009232, 110.3235271 -7.8009815, 110.3235182 -7.8009198), " +
                "(110.3235214 -7.8010247, 110.3238373 -7.8009589, 110.3239145 -7.8014873, 110.3235664 -7.8015372, 110.3235214 -7.8010247), " +
                "(110.3235634 -7.8015783, 110.323957 -7.8015163, 110.3239758 -7.8016341, 110.324071 -7.8016183, 110.3240998 -7.8017897, 110.3240034 -7.8018056, 110.3240128 -7.8018645, 110.3236192 -7.8019264, 110.3235634 -7.8015783))"
        )
        checkPolygon(wkt)
    }

    @Test
    fun testComplexPolygon34() {
        val wkt = (
            "POLYGON((16.9888793 52.3995602, 16.9888951 52.3995678, 16.9888867 52.3995718, 16.9888928 52.3995788, 16.9888945 52.3995867, 16.9888916 52.3995945, 16.9888843 52.3996012, 16.9888738 52.3996059, 16.9888612 52.3996081, 16.9888481 52.3996074, " +
                "16.9888363 52.399604, 16.9888297 52.3996096, 16.9888094 52.3996009, 16.9887881 52.3996192, 16.9888405 52.3996419, 16.9888306 52.3996504, 16.9887783 52.3996277, 16.9887349 52.3996651, 16.9887103 52.3996746, 16.9886922 52.3996886, 16.9886819 52.3997053, " +
                "16.9886804 52.3997231, 16.9886878 52.3997404, 16.9887036 52.3997556, 16.9887086 52.3997679, 16.9887085 52.3997812, 16.9887018 52.3997938, 16.9886433 52.3998479, 16.9886324 52.3998524, 16.9886238 52.3998539, 16.9886151 52.3998526, 16.9885947 52.3998431, " +
                "16.9885866 52.3998495, 16.9886312 52.3998768, 16.988671 52.3999086, 16.9887038 52.3999418, 16.988731 52.3999784, 16.988776 52.3999362, 16.9888177 52.3998971, 16.9888471 52.3999089, 16.989027 52.3997413, 16.9889856 52.3997247, 16.9890396 52.3996744, " +
                "16.9890158 52.3996649, 16.989152 52.3995378, 16.9891608 52.3995249, 16.9891652 52.3995113, 16.989165 52.3994974, 16.9891602 52.3994838, 16.9891509 52.3994711, 16.9891376 52.3994598, 16.9890972 52.3994436, 16.9890682 52.399432, 16.9890372 52.399461, " +
                "16.9890244 52.3994673, 16.9890106 52.3994709, 16.9890079 52.3994628, 16.9890341 52.3994596, 16.989023 52.3994258, 16.9889663 52.3994327, 16.9889675 52.3994666, 16.9889209 52.3994735, 16.9889323 52.3995083, 16.9888772 52.399515, 16.9888885 52.3995493, " +
                "16.9888793 52.3995602), (16.9886602 52.3998804, 16.9886764 52.3998641, 16.9887009 52.3998732, 16.9886894 52.3998847, 16.9887115 52.3999171, 16.9886996 52.3999206, 16.9886602 52.3998804), " +
                "(16.9888417 52.3998584, 16.9888054 52.3998922, 16.9887213 52.3998586, 16.9888863 52.3997049, 16.9889704 52.3997384, 16.9889688 52.3997399, 16.9889926 52.3997494, 16.98896 52.3997796, 16.9889611 52.3997801, 16.9888664 52.3998683, 16.9888417 52.3998584), " +
                "(16.9887468 52.3998164, 16.9887379 52.3998129, 16.9887336 52.3998287, 16.9887468 52.3998164), " +
                "(16.9887603 52.3998039, 16.9887794 52.3997861, 16.9887591 52.3997778, 16.9887451 52.3997981, 16.9887603 52.3998039), " +
                "(16.9887792 52.3997595, 16.9887993 52.3997676, 16.9888261 52.3997426, 16.988806 52.3997346, 16.9887792 52.3997595), " +
                "(16.9888874 52.3996435, 16.9888054 52.3997199, 16.9888168 52.3997245, 16.9888989 52.3996481, 16.9888874 52.3996435), " +
                "(16.9890281 52.3996129, 16.9890181 52.3996223, 16.9889549 52.3995971, 16.9889222 52.3996275, 16.9889098 52.3996226, 16.9889526 52.3995827, 16.9890281 52.3996129), " +
                "(16.9891175 52.3994786, 16.9891045 52.3994903, 16.9890497 52.3994968, 16.9890606 52.3995313, 16.9890056 52.3995378, 16.9890164 52.399572, 16.9890715 52.3995655, 16.9890768 52.3995676, 16.9890382 52.3996035, 16.9889627 52.3995733, 16.9890804 52.3994638, 16.9891175 52.3994786), " +
                "(16.9889151 52.399546, 16.9889436 52.3995425, 16.9889323 52.3995083, 16.9889431 52.3995139, 16.98895 52.3995215, 16.9889523 52.39953, 16.9889496 52.3995385, 16.9889423 52.399546, 16.9889312 52.3995514, 16.9889178 52.3995541, 16.9889151 52.399546), " +
                "(16.9889615 52.3995047, 16.9889645 52.3995137, 16.9889783 52.3995107, 16.9889896 52.3995051, 16.9889969 52.3994973, 16.9889993 52.3994885, 16.9889966 52.3994797, 16.988989 52.3994721, 16.9889775 52.3994666, 16.988989 52.3995013, 16.9889615 52.3995047), " +
                "(16.9890664 52.3995495, 16.9890796 52.399548, 16.9890725 52.3995387, 16.9890606 52.3995313, 16.9890664 52.3995495), " +
                "(16.9890606 52.3995313, 16.9890747 52.3995357, 16.9890905 52.3995359, 16.989105 52.3995321, 16.9891154 52.3995249, 16.9890606 52.3995313), " +
                "(16.9891045 52.3994903, 16.9891101 52.399508, 16.9891232 52.3995065, 16.9891163 52.3994967, 16.9891045 52.3994903))"
        )
        checkPolygon(wkt)
    }

    // helper functions ported from Java
    private fun checkPolygon(wkt: String) {
        val polygon = SimpleWKTShapeParser.parse(wkt) as Polygon
        checkPolygon(polygon, 0.0)
    }

    private fun checkMultiPolygon(wkt: String, delta: Double = 0.0) {
        val polygons = SimpleWKTShapeParser.parse(wkt) as Array<Polygon>
        checkMultiPolygon(polygons, delta)
    }

    private fun checkMultiPolygon(polygons: Array<Polygon>, delta: Double) {
        for (p in polygons) {
            checkPolygon(p, delta)
        }
    }

    private fun checkPolygon(polygon: Polygon, delta: Double) {
        val tessellation = Tessellator.tessellate(polygon, random().nextBoolean())
        assertEquals(area(polygon), area(tessellation), delta)
        for (t in tessellation) {
            checkTriangleEdgesFromPolygon(polygon, t)
        }
    }

    private fun checkTriangleEdgesFromPolygon(p: Polygon, t: Tessellator.Triangle) {
        assertEquals(t.isEdgefromPolygon(0), isEdgeFromPolygon(p, t.getX(0), t.getY(0), t.getX(1), t.getY(1)))
        assertEquals(t.isEdgefromPolygon(1), isEdgeFromPolygon(p, t.getX(1), t.getY(1), t.getX(2), t.getY(2)))
        assertEquals(t.isEdgefromPolygon(2), isEdgeFromPolygon(p, t.getX(2), t.getY(2), t.getX(0), t.getY(0)))
    }

    private fun area(p: Polygon): Double {
        var acc = 0.0
        for (i in 0 until p.numPoints() - 1) {
            acc += p.getPolyLon(i) * p.getPolyLat(i + 1) - p.getPolyLat(i) * p.getPolyLon(i + 1)
        }
        var area = abs(acc / 2.0)
        for (hole in p.getHoles()) {
            area -= area(hole)
        }
        return area
    }

    private fun area(triangles: List<Tessellator.Triangle>): Double {
        var area = 0.0
        for (t in triangles) {
            val lats = doubleArrayOf(t.getY(0), t.getY(1), t.getY(2), t.getY(0))
            val lons = doubleArrayOf(t.getX(0), t.getX(1), t.getX(2), t.getX(0))
            area += area(Polygon(lats, lons))
        }
        return area
    }

    private fun isEdgeFromPolygon(p: Polygon, aLon: Double, aLat: Double, bLon: Double, bLat: Double): Boolean {
        for (i in 0 until p.getPolyLats().size - 1) {
            if (isPointInLine(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(i + 1), p.getPolyLat(i + 1), aLon, aLat) &&
                isPointInLine(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(i + 1), p.getPolyLat(i + 1), bLon, bLat)
            ) {
                return true
            }
            if (p.getPolyLon(i) != p.getPolyLon(i + 1) || p.getPolyLat(i) != p.getPolyLat(i + 1)) {
                val length = p.getPolyLats().size
                val offset = i + 2
                var j = 0
                var index = getIndex(length, j + offset)
                while (j < length && area(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(i + 1), p.getPolyLat(i + 1), p.getPolyLon(index), p.getPolyLat(index)) == 0.0) {
                    if (isPointInLine(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(index), p.getPolyLat(index), aLon, aLat) &&
                        isPointInLine(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(index), p.getPolyLat(index), bLon, bLat)
                    ) {
                        return true
                    }
                    index = getIndex(length, ++j + offset)
                }
            }
        }
        for (hole in p.getHoles()) {
            if (isEdgeFromPolygon(hole, aLon, aLat, bLon, bLat)) {
                return true
            }
        }
        return false
    }

    private fun getIndex(size: Int, index: Int): Int = if (index < size) index else index - size

    private fun area(aX: Double, aY: Double, bX: Double, bY: Double, cX: Double, cY: Double): Double {
        return (bY - aY) * (cX - bX) - (bX - aX) * (cY - bY)
    }

    private fun isPointInLine(aX: Double, aY: Double, bX: Double, bY: Double, lon: Double, lat: Double): Boolean {
        val dxc = lon - aX
        val dyc = lat - aY
        val dxl = bX - aX
        val dyl = bY - aY
        if (dxc * dyl - dyc * dxl == 0.0) {
            return if (abs(dxl) >= abs(dyl)) {
                if (dxl > 0) aX <= lon && lon <= bX else bX <= lon && lon <= aX
            } else {
                if (dyl > 0) aY <= lat && lat <= bY else bY <= lat && lat <= aY
            }
        }
        return false
    }
}
